

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Frontend-SercuIntegraded\Web.config"
//     Connection String Name: "FrontendDbContext"
//     Connection String:      "Data Source=.\SQLEXPRESS;Initial Catalog=InfoWebAppDb_150531;Persist Security Info=True;User ID=sa;password=**zapped**;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace Frontend_SercuIntegraded.GenerateModels
{
    using System.Linq;

    #region Unit of work

    public interface IFrontendDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<TblArea> TblAreas { get; set; } // tbl_Area
        System.Data.Entity.DbSet<TblMenu> TblMenus { get; set; } // tbl_Menu
        System.Data.Entity.DbSet<TblNews> TblNews { get; set; } // tbl_News
        System.Data.Entity.DbSet<TblPrivateNew> TblPrivateNews { get; set; } // tbl_PrivateNews
        System.Data.Entity.DbSet<TblSpamPhone> TblSpamPhones { get; set; } // tbl_SpamPhone
        System.Data.Entity.DbSet<User> Users { get; set; } // Users
        System.Data.Entity.DbSet<WebpagesMembership> WebpagesMemberships { get; set; } // webpages_Membership
        System.Data.Entity.DbSet<WebpagesOAuthMembership> WebpagesOAuthMemberships { get; set; } // webpages_OAuthMembership
        System.Data.Entity.DbSet<WebpagesRole> WebpagesRoles { get; set; } // webpages_Roles

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);

        // Stored Procedures
        System.Collections.Generic.List<AddTblMenuReturnModel> AddTblMenu(string name, string description, int? parentId);
        System.Collections.Generic.List<AddTblMenuReturnModel> AddTblMenu(string name, string description, int? parentId, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<AddTblMenuReturnModel>> AddTblMenuAsync(string name, string description, int? parentId);

        System.Collections.Generic.List<AddTblNewsReturnModel> AddTblNews(string title, int? tinhThanhId, int? quanHuyenId, string address, int? menuId, string dientich, string price, string phoneNumber, string newsContent, int? userId);
        System.Collections.Generic.List<AddTblNewsReturnModel> AddTblNews(string title, int? tinhThanhId, int? quanHuyenId, string address, int? menuId, string dientich, string price, string phoneNumber, string newsContent, int? userId, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<AddTblNewsReturnModel>> AddTblNewsAsync(string title, int? tinhThanhId, int? quanHuyenId, string address, int? menuId, string dientich, string price, string phoneNumber, string newsContent, int? userId);

        System.Collections.Generic.List<AddTblPrivateNewsReturnModel> AddTblPrivateNews(string title, string newsContent, string address, string dientich, string price, string phoneNumber, int? menuId, int? tinhThanhId, int? quanHuyenId, int? status);
        System.Collections.Generic.List<AddTblPrivateNewsReturnModel> AddTblPrivateNews(string title, string newsContent, string address, string dientich, string price, string phoneNumber, int? menuId, int? tinhThanhId, int? quanHuyenId, int? status, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<AddTblPrivateNewsReturnModel>> AddTblPrivateNewsAsync(string title, string newsContent, string address, string dientich, string price, string phoneNumber, int? menuId, int? tinhThanhId, int? quanHuyenId, int? status);

        System.Collections.Generic.List<AddTblSpamPhoneReturnModel> AddTblSpamPhone(string spamPhone, string spamName, int? status);
        System.Collections.Generic.List<AddTblSpamPhoneReturnModel> AddTblSpamPhone(string spamPhone, string spamName, int? status, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<AddTblSpamPhoneReturnModel>> AddTblSpamPhoneAsync(string spamPhone, string spamName, int? status);

        int AddTblUserRegister(string password, string fullName, string phoneNumber, string email, string address);
        // AddTblUserRegisterAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int ChangePassword(string password, string phoneNumber);
        // ChangePasswordAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int CheckPhoneNumber(string phoneNumber);
        // CheckPhoneNumberAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<CheckPhoneSpamReturnModel> CheckPhoneSpam(string phoneNumber);
        System.Collections.Generic.List<CheckPhoneSpamReturnModel> CheckPhoneSpam(string phoneNumber, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<CheckPhoneSpamReturnModel>> CheckPhoneSpamAsync(string phoneNumber);

        int DeactivePrivateNewsByPhone(string phoneNumber);
        // DeactivePrivateNewsByPhoneAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int DeleteMenuById(int? id);
        // DeleteMenuByIdAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int DeleteNewsById(int? id);
        // DeleteNewsByIdAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<GetCategoryNewsReturnModel> GetCategoryNews();
        System.Collections.Generic.List<GetCategoryNewsReturnModel> GetCategoryNews(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetCategoryNewsReturnModel>> GetCategoryNewsAsync();

        System.Collections.Generic.List<GetParentMenuReturnModel> GetParentMenu();
        System.Collections.Generic.List<GetParentMenuReturnModel> GetParentMenu(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetParentMenuReturnModel>> GetParentMenuAsync();

        System.Collections.Generic.List<GetParentMenuByIdReturnModel> GetParentMenuById(int? id);
        System.Collections.Generic.List<GetParentMenuByIdReturnModel> GetParentMenuById(int? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetParentMenuByIdReturnModel>> GetParentMenuByIdAsync(int? id);

        System.Collections.Generic.List<GetTblMenuReturnModel> GetTblMenu();
        System.Collections.Generic.List<GetTblMenuReturnModel> GetTblMenu(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetTblMenuReturnModel>> GetTblMenuAsync();

        System.Collections.Generic.List<GetAreaReturnModel> GetArea();
        System.Collections.Generic.List<GetAreaReturnModel> GetArea(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetAreaReturnModel>> GetAreaAsync();

        System.Collections.Generic.List<GetAreaByParentIdReturnModel> GetAreaByParentId(int? parentId);
        System.Collections.Generic.List<GetAreaByParentIdReturnModel> GetAreaByParentId(int? parentId, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetAreaByParentIdReturnModel>> GetAreaByParentIdAsync(int? parentId);

        System.Collections.Generic.List<GetDetailNewsReturnModel> GetDetailNews(int? id);
        System.Collections.Generic.List<GetDetailNewsReturnModel> GetDetailNews(int? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetDetailNewsReturnModel>> GetDetailNewsAsync(int? id);

        int GetDistrictIdByName(string name, out int? id);
        // GetDistrictIdByNameAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<GetMenuByIdReturnModel> GetMenuById(int? id);
        System.Collections.Generic.List<GetMenuByIdReturnModel> GetMenuById(int? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetMenuByIdReturnModel>> GetMenuByIdAsync(int? id);

        System.Collections.Generic.List<GetNewsByIdReturnModel> GetNewsById(int? id);
        System.Collections.Generic.List<GetNewsByIdReturnModel> GetNewsById(int? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetNewsByIdReturnModel>> GetNewsByIdAsync(int? id);

        System.Collections.Generic.List<GetNewsWithNoDistrictValReturnModel> GetNewsWithNoDistrictVal(int? pageNumber, int? rowspPage, out int? countTitle);
        System.Collections.Generic.List<GetNewsWithNoDistrictValReturnModel> GetNewsWithNoDistrictVal(int? pageNumber, int? rowspPage, out int? countTitle, out int procResult);
        // GetNewsWithNoDistrictValAsync cannot be created due to having out parameters, or is relying on the procedure result (System.Collections.Generic.List<GetNewsWithNoDistrictValReturnModel>)

        System.Collections.Generic.List<GetPrivateNewsByIdReturnModel> GetPrivateNewsById(int? id);
        System.Collections.Generic.List<GetPrivateNewsByIdReturnModel> GetPrivateNewsById(int? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetPrivateNewsByIdReturnModel>> GetPrivateNewsByIdAsync(int? id);

        int LoginUser(string phoneNumber);
        // LoginUserAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<PrivateNewsNotAssginedAreaReturnModel> PrivateNewsNotAssginedArea(int? pageNumber, int? rowspPage, out int? countTitle);
        System.Collections.Generic.List<PrivateNewsNotAssginedAreaReturnModel> PrivateNewsNotAssginedArea(int? pageNumber, int? rowspPage, out int? countTitle, out int procResult);
        // PrivateNewsNotAssginedAreaAsync cannot be created due to having out parameters, or is relying on the procedure result (System.Collections.Generic.List<PrivateNewsNotAssginedAreaReturnModel>)

        int ProcGetSpamByPhoneNo(int? phoneNumber);
        // ProcGetSpamByPhoneNoAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<SearchMyPostReturnModel> SearchMyPost(int? tinhThanhId, int? quanHuyenId, string titleSearch, string price, int? pageNumber, int? rowspPage, int? userId, out int? countTitle);
        System.Collections.Generic.List<SearchMyPostReturnModel> SearchMyPost(int? tinhThanhId, int? quanHuyenId, string titleSearch, string price, int? pageNumber, int? rowspPage, int? userId, out int? countTitle, out int procResult);
        // SearchMyPostAsync cannot be created due to having out parameters, or is relying on the procedure result (System.Collections.Generic.List<SearchMyPostReturnModel>)

        System.Collections.Generic.List<SearchTblNewsReturnModel> SearchTblNews(int? tinhThanhId, int? quanHuyenId, string titleSearch, string price, int? pageNumber, int? rowspPage, int? menuId, out int? countTitle);
        System.Collections.Generic.List<SearchTblNewsReturnModel> SearchTblNews(int? tinhThanhId, int? quanHuyenId, string titleSearch, string price, int? pageNumber, int? rowspPage, int? menuId, out int? countTitle, out int procResult);
        // SearchTblNewsAsync cannot be created due to having out parameters, or is relying on the procedure result (System.Collections.Generic.List<SearchTblNewsReturnModel>)

        System.Collections.Generic.List<SearchTblPrivateNewsReturnModel> SearchTblPrivateNews(string titleSearch, string phoneNumber, string address, string price, System.DateTime? dateStart, System.DateTime? dateEnd, int? pageNumber, int? rowspPage, int? status, int? menuId, int? tinhThanhId, int? quanHuyenId, out int? countTitle);
        System.Collections.Generic.List<SearchTblPrivateNewsReturnModel> SearchTblPrivateNews(string titleSearch, string phoneNumber, string address, string price, System.DateTime? dateStart, System.DateTime? dateEnd, int? pageNumber, int? rowspPage, int? status, int? menuId, int? tinhThanhId, int? quanHuyenId, out int? countTitle, out int procResult);
        // SearchTblPrivateNewsAsync cannot be created due to having out parameters, or is relying on the procedure result (System.Collections.Generic.List<SearchTblPrivateNewsReturnModel>)

        int UpdateTblMenu(string name, string description, int? parentId, int? id);
        // UpdateTblMenuAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int UpdateTblNews(string title, int? tinhThanhId, int? quanHuyenId, string address, int? menuId, string dientich, string price, string phoneNumber, string newsContent, int? userId, int? id);
        // UpdateTblNewsAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int UpdateTblPrivateNewsViaGoogle(int? status, int? id);
        // UpdateTblPrivateNewsViaGoogleAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int UpdateUserInfo(string fullName, string email, string address, string phoneNumer);
        // UpdateUserInfoAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int UserInfo(string phoneNumber);
        // UserInfoAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FrontendDbContext : System.Data.Entity.DbContext, IFrontendDbContext
    {
        public System.Data.Entity.DbSet<TblArea> TblAreas { get; set; } // tbl_Area
        public System.Data.Entity.DbSet<TblMenu> TblMenus { get; set; } // tbl_Menu
        public System.Data.Entity.DbSet<TblNews> TblNews { get; set; } // tbl_News
        public System.Data.Entity.DbSet<TblPrivateNew> TblPrivateNews { get; set; } // tbl_PrivateNews
        public System.Data.Entity.DbSet<TblSpamPhone> TblSpamPhones { get; set; } // tbl_SpamPhone
        public System.Data.Entity.DbSet<User> Users { get; set; } // Users
        public System.Data.Entity.DbSet<WebpagesMembership> WebpagesMemberships { get; set; } // webpages_Membership
        public System.Data.Entity.DbSet<WebpagesOAuthMembership> WebpagesOAuthMemberships { get; set; } // webpages_OAuthMembership
        public System.Data.Entity.DbSet<WebpagesRole> WebpagesRoles { get; set; } // webpages_Roles

        static FrontendDbContext()
        {
            System.Data.Entity.Database.SetInitializer<FrontendDbContext>(null);
        }

        public FrontendDbContext()
            : base("Name=FrontendDbContext")
        {
        }

        public FrontendDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public FrontendDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public FrontendDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public FrontendDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new TblAreaConfiguration());
            modelBuilder.Configurations.Add(new TblMenuConfiguration());
            modelBuilder.Configurations.Add(new TblNewsConfiguration());
            modelBuilder.Configurations.Add(new TblPrivateNewConfiguration());
            modelBuilder.Configurations.Add(new TblSpamPhoneConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
            modelBuilder.Configurations.Add(new WebpagesMembershipConfiguration());
            modelBuilder.Configurations.Add(new WebpagesOAuthMembershipConfiguration());
            modelBuilder.Configurations.Add(new WebpagesRoleConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new TblAreaConfiguration(schema));
            modelBuilder.Configurations.Add(new TblMenuConfiguration(schema));
            modelBuilder.Configurations.Add(new TblNewsConfiguration(schema));
            modelBuilder.Configurations.Add(new TblPrivateNewConfiguration(schema));
            modelBuilder.Configurations.Add(new TblSpamPhoneConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            modelBuilder.Configurations.Add(new WebpagesMembershipConfiguration(schema));
            modelBuilder.Configurations.Add(new WebpagesOAuthMembershipConfiguration(schema));
            modelBuilder.Configurations.Add(new WebpagesRoleConfiguration(schema));
            return modelBuilder;
        }
        
        // Stored Procedures
        public System.Collections.Generic.List<AddTblMenuReturnModel> AddTblMenu(string name, string description, int? parentId)
        {
            int procResult;
            return AddTblMenu(name, description, parentId, out procResult);
        }

        public System.Collections.Generic.List<AddTblMenuReturnModel> AddTblMenu(string name, string description, int? parentId, out int procResult)
        {
            var nameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Name", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = name, Size = 50 };
            if (nameParam.Value == null)
                nameParam.Value = System.DBNull.Value;

            var descriptionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Description", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = description, Size = 1000 };
            if (descriptionParam.Value == null)
                descriptionParam.Value = System.DBNull.Value;

            var parentIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ParentId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = parentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!parentId.HasValue)
                parentIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AddTblMenuReturnModel>("EXEC @procResult = [dbo].[Add_tblMenu] @Name, @Description, @ParentId", nameParam, descriptionParam, parentIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AddTblMenuReturnModel>> AddTblMenuAsync(string name, string description, int? parentId)
        {
            var nameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Name", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = name, Size = 50 };
            if (nameParam.Value == null)
                nameParam.Value = System.DBNull.Value;

            var descriptionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Description", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = description, Size = 1000 };
            if (descriptionParam.Value == null)
                descriptionParam.Value = System.DBNull.Value;

            var parentIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ParentId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = parentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!parentId.HasValue)
                parentIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AddTblMenuReturnModel>("EXEC [dbo].[Add_tblMenu] @Name, @Description, @ParentId", nameParam, descriptionParam, parentIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<AddTblNewsReturnModel> AddTblNews(string title, int? tinhThanhId, int? quanHuyenId, string address, int? menuId, string dientich, string price, string phoneNumber, string newsContent, int? userId)
        {
            int procResult;
            return AddTblNews(title, tinhThanhId, quanHuyenId, address, menuId, dientich, price, phoneNumber, newsContent, userId, out procResult);
        }

        public System.Collections.Generic.List<AddTblNewsReturnModel> AddTblNews(string title, int? tinhThanhId, int? quanHuyenId, string address, int? menuId, string dientich, string price, string phoneNumber, string newsContent, int? userId, out int procResult)
        {
            var titleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Title", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = title, Size = 1000 };
            if (titleParam.Value == null)
                titleParam.Value = System.DBNull.Value;

            var tinhThanhIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TinhThanhId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tinhThanhId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tinhThanhId.HasValue)
                tinhThanhIdParam.Value = System.DBNull.Value;

            var quanHuyenIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuanHuyenId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = quanHuyenId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!quanHuyenId.HasValue)
                quanHuyenIdParam.Value = System.DBNull.Value;

            var addressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = address, Size = 1000 };
            if (addressParam.Value == null)
                addressParam.Value = System.DBNull.Value;

            var menuIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MenuId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = menuId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!menuId.HasValue)
                menuIdParam.Value = System.DBNull.Value;

            var dientichParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Dientich", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = dientich, Size = 50 };
            if (dientichParam.Value == null)
                dientichParam.Value = System.DBNull.Value;

            var priceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Price", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = price, Size = 50 };
            if (priceParam.Value == null)
                priceParam.Value = System.DBNull.Value;

            var phoneNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PhoneNumber", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = phoneNumber, Size = 50 };
            if (phoneNumberParam.Value == null)
                phoneNumberParam.Value = System.DBNull.Value;

            var newsContentParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@NewsContent", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = newsContent, Size = -1 };
            if (newsContentParam.Value == null)
                newsContentParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AddTblNewsReturnModel>("EXEC @procResult = [dbo].[Add_tblNews] @Title, @TinhThanhId, @QuanHuyenId, @Address, @MenuId, @Dientich, @Price, @PhoneNumber, @NewsContent, @UserId", titleParam, tinhThanhIdParam, quanHuyenIdParam, addressParam, menuIdParam, dientichParam, priceParam, phoneNumberParam, newsContentParam, userIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AddTblNewsReturnModel>> AddTblNewsAsync(string title, int? tinhThanhId, int? quanHuyenId, string address, int? menuId, string dientich, string price, string phoneNumber, string newsContent, int? userId)
        {
            var titleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Title", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = title, Size = 1000 };
            if (titleParam.Value == null)
                titleParam.Value = System.DBNull.Value;

            var tinhThanhIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TinhThanhId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tinhThanhId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tinhThanhId.HasValue)
                tinhThanhIdParam.Value = System.DBNull.Value;

            var quanHuyenIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuanHuyenId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = quanHuyenId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!quanHuyenId.HasValue)
                quanHuyenIdParam.Value = System.DBNull.Value;

            var addressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = address, Size = 1000 };
            if (addressParam.Value == null)
                addressParam.Value = System.DBNull.Value;

            var menuIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MenuId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = menuId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!menuId.HasValue)
                menuIdParam.Value = System.DBNull.Value;

            var dientichParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Dientich", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = dientich, Size = 50 };
            if (dientichParam.Value == null)
                dientichParam.Value = System.DBNull.Value;

            var priceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Price", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = price, Size = 50 };
            if (priceParam.Value == null)
                priceParam.Value = System.DBNull.Value;

            var phoneNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PhoneNumber", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = phoneNumber, Size = 50 };
            if (phoneNumberParam.Value == null)
                phoneNumberParam.Value = System.DBNull.Value;

            var newsContentParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@NewsContent", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = newsContent, Size = -1 };
            if (newsContentParam.Value == null)
                newsContentParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AddTblNewsReturnModel>("EXEC [dbo].[Add_tblNews] @Title, @TinhThanhId, @QuanHuyenId, @Address, @MenuId, @Dientich, @Price, @PhoneNumber, @NewsContent, @UserId", titleParam, tinhThanhIdParam, quanHuyenIdParam, addressParam, menuIdParam, dientichParam, priceParam, phoneNumberParam, newsContentParam, userIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<AddTblPrivateNewsReturnModel> AddTblPrivateNews(string title, string newsContent, string address, string dientich, string price, string phoneNumber, int? menuId, int? tinhThanhId, int? quanHuyenId, int? status)
        {
            int procResult;
            return AddTblPrivateNews(title, newsContent, address, dientich, price, phoneNumber, menuId, tinhThanhId, quanHuyenId, status, out procResult);
        }

        public System.Collections.Generic.List<AddTblPrivateNewsReturnModel> AddTblPrivateNews(string title, string newsContent, string address, string dientich, string price, string phoneNumber, int? menuId, int? tinhThanhId, int? quanHuyenId, int? status, out int procResult)
        {
            var titleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Title", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = title, Size = 1000 };
            if (titleParam.Value == null)
                titleParam.Value = System.DBNull.Value;

            var newsContentParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@NewsContent", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = newsContent, Size = -1 };
            if (newsContentParam.Value == null)
                newsContentParam.Value = System.DBNull.Value;

            var addressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = address, Size = 1000 };
            if (addressParam.Value == null)
                addressParam.Value = System.DBNull.Value;

            var dientichParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Dientich", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = dientich, Size = 50 };
            if (dientichParam.Value == null)
                dientichParam.Value = System.DBNull.Value;

            var priceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Price", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = price, Size = 50 };
            if (priceParam.Value == null)
                priceParam.Value = System.DBNull.Value;

            var phoneNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PhoneNumber", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = phoneNumber, Size = 50 };
            if (phoneNumberParam.Value == null)
                phoneNumberParam.Value = System.DBNull.Value;

            var menuIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MenuId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = menuId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!menuId.HasValue)
                menuIdParam.Value = System.DBNull.Value;

            var tinhThanhIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TinhThanhId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tinhThanhId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tinhThanhId.HasValue)
                tinhThanhIdParam.Value = System.DBNull.Value;

            var quanHuyenIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuanHuyenId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = quanHuyenId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!quanHuyenId.HasValue)
                quanHuyenIdParam.Value = System.DBNull.Value;

            var statusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Status", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = status.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!status.HasValue)
                statusParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AddTblPrivateNewsReturnModel>("EXEC @procResult = [dbo].[Add_tblPrivateNews] @Title, @NewsContent, @Address, @Dientich, @Price, @PhoneNumber, @MenuId, @TinhThanhId, @QuanHuyenId, @Status", titleParam, newsContentParam, addressParam, dientichParam, priceParam, phoneNumberParam, menuIdParam, tinhThanhIdParam, quanHuyenIdParam, statusParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AddTblPrivateNewsReturnModel>> AddTblPrivateNewsAsync(string title, string newsContent, string address, string dientich, string price, string phoneNumber, int? menuId, int? tinhThanhId, int? quanHuyenId, int? status)
        {
            var titleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Title", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = title, Size = 1000 };
            if (titleParam.Value == null)
                titleParam.Value = System.DBNull.Value;

            var newsContentParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@NewsContent", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = newsContent, Size = -1 };
            if (newsContentParam.Value == null)
                newsContentParam.Value = System.DBNull.Value;

            var addressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = address, Size = 1000 };
            if (addressParam.Value == null)
                addressParam.Value = System.DBNull.Value;

            var dientichParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Dientich", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = dientich, Size = 50 };
            if (dientichParam.Value == null)
                dientichParam.Value = System.DBNull.Value;

            var priceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Price", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = price, Size = 50 };
            if (priceParam.Value == null)
                priceParam.Value = System.DBNull.Value;

            var phoneNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PhoneNumber", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = phoneNumber, Size = 50 };
            if (phoneNumberParam.Value == null)
                phoneNumberParam.Value = System.DBNull.Value;

            var menuIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MenuId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = menuId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!menuId.HasValue)
                menuIdParam.Value = System.DBNull.Value;

            var tinhThanhIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TinhThanhId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tinhThanhId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tinhThanhId.HasValue)
                tinhThanhIdParam.Value = System.DBNull.Value;

            var quanHuyenIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuanHuyenId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = quanHuyenId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!quanHuyenId.HasValue)
                quanHuyenIdParam.Value = System.DBNull.Value;

            var statusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Status", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = status.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!status.HasValue)
                statusParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AddTblPrivateNewsReturnModel>("EXEC [dbo].[Add_tblPrivateNews] @Title, @NewsContent, @Address, @Dientich, @Price, @PhoneNumber, @MenuId, @TinhThanhId, @QuanHuyenId, @Status", titleParam, newsContentParam, addressParam, dientichParam, priceParam, phoneNumberParam, menuIdParam, tinhThanhIdParam, quanHuyenIdParam, statusParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<AddTblSpamPhoneReturnModel> AddTblSpamPhone(string spamPhone, string spamName, int? status)
        {
            int procResult;
            return AddTblSpamPhone(spamPhone, spamName, status, out procResult);
        }

        public System.Collections.Generic.List<AddTblSpamPhoneReturnModel> AddTblSpamPhone(string spamPhone, string spamName, int? status, out int procResult)
        {
            var spamPhoneParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SpamPhone", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = spamPhone, Size = 50 };
            if (spamPhoneParam.Value == null)
                spamPhoneParam.Value = System.DBNull.Value;

            var spamNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SpamName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = spamName, Size = 250 };
            if (spamNameParam.Value == null)
                spamNameParam.Value = System.DBNull.Value;

            var statusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Status", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = status.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!status.HasValue)
                statusParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AddTblSpamPhoneReturnModel>("EXEC @procResult = [dbo].[Add_tblSpamPhone] @SpamPhone, @SpamName, @Status", spamPhoneParam, spamNameParam, statusParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AddTblSpamPhoneReturnModel>> AddTblSpamPhoneAsync(string spamPhone, string spamName, int? status)
        {
            var spamPhoneParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SpamPhone", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = spamPhone, Size = 50 };
            if (spamPhoneParam.Value == null)
                spamPhoneParam.Value = System.DBNull.Value;

            var spamNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SpamName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = spamName, Size = 250 };
            if (spamNameParam.Value == null)
                spamNameParam.Value = System.DBNull.Value;

            var statusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Status", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = status.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!status.HasValue)
                statusParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AddTblSpamPhoneReturnModel>("EXEC [dbo].[Add_tblSpamPhone] @SpamPhone, @SpamName, @Status", spamPhoneParam, spamNameParam, statusParam).ToListAsync();

            return procResultData;
        }

        public int AddTblUserRegister(string password, string fullName, string phoneNumber, string email, string address)
        {
            var passwordParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Password", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = password, Size = -1 };
            if (passwordParam.Value == null)
                passwordParam.Value = System.DBNull.Value;

            var fullNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FullName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = fullName, Size = 300 };
            if (fullNameParam.Value == null)
                fullNameParam.Value = System.DBNull.Value;

            var phoneNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PhoneNumber", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = phoneNumber, Size = 50 };
            if (phoneNumberParam.Value == null)
                phoneNumberParam.Value = System.DBNull.Value;

            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Email", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 50 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var addressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = address, Size = -1 };
            if (addressParam.Value == null)
                addressParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[Add_tblUser_Register] @Password, @FullName, @PhoneNumber, @Email, @Address", passwordParam, fullNameParam, phoneNumberParam, emailParam, addressParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int ChangePassword(string password, string phoneNumber)
        {
            var passwordParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Password", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = password, Size = -1 };
            if (passwordParam.Value == null)
                passwordParam.Value = System.DBNull.Value;

            var phoneNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PhoneNumber", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = phoneNumber, Size = 50 };
            if (phoneNumberParam.Value == null)
                phoneNumberParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[ChangePassword] @Password, @PhoneNumber", passwordParam, phoneNumberParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int CheckPhoneNumber(string phoneNumber)
        {
            var phoneNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PhoneNumber", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = phoneNumber, Size = -1 };
            if (phoneNumberParam.Value == null)
                phoneNumberParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[CheckPhoneNumber] @PhoneNumber", phoneNumberParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<CheckPhoneSpamReturnModel> CheckPhoneSpam(string phoneNumber)
        {
            int procResult;
            return CheckPhoneSpam(phoneNumber, out procResult);
        }

        public System.Collections.Generic.List<CheckPhoneSpamReturnModel> CheckPhoneSpam(string phoneNumber, out int procResult)
        {
            var phoneNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PhoneNumber", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = phoneNumber, Size = 20 };
            if (phoneNumberParam.Value == null)
                phoneNumberParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<CheckPhoneSpamReturnModel>("EXEC @procResult = [dbo].[CheckPhoneSpam] @PhoneNumber", phoneNumberParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<CheckPhoneSpamReturnModel>> CheckPhoneSpamAsync(string phoneNumber)
        {
            var phoneNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PhoneNumber", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = phoneNumber, Size = 20 };
            if (phoneNumberParam.Value == null)
                phoneNumberParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<CheckPhoneSpamReturnModel>("EXEC [dbo].[CheckPhoneSpam] @PhoneNumber", phoneNumberParam).ToListAsync();

            return procResultData;
        }

        public int DeactivePrivateNewsByPhone(string phoneNumber)
        {
            var phoneNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PhoneNumber", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = phoneNumber, Size = 50 };
            if (phoneNumberParam.Value == null)
                phoneNumberParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[DeactivePrivateNewsByPhone] @PhoneNumber", phoneNumberParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int DeleteMenuById(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[DeleteMenuById] @Id", idParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int DeleteNewsById(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[DeleteNewsById] @Id", idParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<GetCategoryNewsReturnModel> GetCategoryNews()
        {
            int procResult;
            return GetCategoryNews(out procResult);
        }

        public System.Collections.Generic.List<GetCategoryNewsReturnModel> GetCategoryNews(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetCategoryNewsReturnModel>("EXEC @procResult = [dbo].[Get_CategoryNews] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetCategoryNewsReturnModel>> GetCategoryNewsAsync()
        {
            var procResultData = await Database.SqlQuery<GetCategoryNewsReturnModel>("EXEC [dbo].[Get_CategoryNews] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetParentMenuReturnModel> GetParentMenu()
        {
            int procResult;
            return GetParentMenu(out procResult);
        }

        public System.Collections.Generic.List<GetParentMenuReturnModel> GetParentMenu(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetParentMenuReturnModel>("EXEC @procResult = [dbo].[Get_ParentMenu] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetParentMenuReturnModel>> GetParentMenuAsync()
        {
            var procResultData = await Database.SqlQuery<GetParentMenuReturnModel>("EXEC [dbo].[Get_ParentMenu] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetParentMenuByIdReturnModel> GetParentMenuById(int? id)
        {
            int procResult;
            return GetParentMenuById(id, out procResult);
        }

        public System.Collections.Generic.List<GetParentMenuByIdReturnModel> GetParentMenuById(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetParentMenuByIdReturnModel>("EXEC @procResult = [dbo].[Get_ParentMenuById] @Id", idParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetParentMenuByIdReturnModel>> GetParentMenuByIdAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetParentMenuByIdReturnModel>("EXEC [dbo].[Get_ParentMenuById] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetTblMenuReturnModel> GetTblMenu()
        {
            int procResult;
            return GetTblMenu(out procResult);
        }

        public System.Collections.Generic.List<GetTblMenuReturnModel> GetTblMenu(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetTblMenuReturnModel>("EXEC @procResult = [dbo].[Get_tblMenu] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetTblMenuReturnModel>> GetTblMenuAsync()
        {
            var procResultData = await Database.SqlQuery<GetTblMenuReturnModel>("EXEC [dbo].[Get_tblMenu] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetAreaReturnModel> GetArea()
        {
            int procResult;
            return GetArea(out procResult);
        }

        public System.Collections.Generic.List<GetAreaReturnModel> GetArea(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAreaReturnModel>("EXEC @procResult = [dbo].[GetArea] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetAreaReturnModel>> GetAreaAsync()
        {
            var procResultData = await Database.SqlQuery<GetAreaReturnModel>("EXEC [dbo].[GetArea] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetAreaByParentIdReturnModel> GetAreaByParentId(int? parentId)
        {
            int procResult;
            return GetAreaByParentId(parentId, out procResult);
        }

        public System.Collections.Generic.List<GetAreaByParentIdReturnModel> GetAreaByParentId(int? parentId, out int procResult)
        {
            var parentIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ParentId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = parentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!parentId.HasValue)
                parentIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAreaByParentIdReturnModel>("EXEC @procResult = [dbo].[GetAreaByParentId] @ParentId", parentIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetAreaByParentIdReturnModel>> GetAreaByParentIdAsync(int? parentId)
        {
            var parentIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ParentId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = parentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!parentId.HasValue)
                parentIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetAreaByParentIdReturnModel>("EXEC [dbo].[GetAreaByParentId] @ParentId", parentIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetDetailNewsReturnModel> GetDetailNews(int? id)
        {
            int procResult;
            return GetDetailNews(id, out procResult);
        }

        public System.Collections.Generic.List<GetDetailNewsReturnModel> GetDetailNews(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetDetailNewsReturnModel>("EXEC @procResult = [dbo].[GetDetailNews] @Id", idParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetDetailNewsReturnModel>> GetDetailNewsAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetDetailNewsReturnModel>("EXEC [dbo].[GetDetailNews] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public int GetDistrictIdByName(string name, out int? id)
        {
            var nameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Name", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = name, Size = 50 };
            if (nameParam.Value == null)
                nameParam.Value = System.DBNull.Value;

            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[GetDistrictIdByName] @Name, @Id OUTPUT", nameParam, idParam, procResultParam);
            if (IsSqlParameterNull(idParam))
                id = null;
            else
                id = (int) idParam.Value;
 
            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<GetMenuByIdReturnModel> GetMenuById(int? id)
        {
            int procResult;
            return GetMenuById(id, out procResult);
        }

        public System.Collections.Generic.List<GetMenuByIdReturnModel> GetMenuById(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetMenuByIdReturnModel>("EXEC @procResult = [dbo].[GetMenuById] @Id", idParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetMenuByIdReturnModel>> GetMenuByIdAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetMenuByIdReturnModel>("EXEC [dbo].[GetMenuById] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetNewsByIdReturnModel> GetNewsById(int? id)
        {
            int procResult;
            return GetNewsById(id, out procResult);
        }

        public System.Collections.Generic.List<GetNewsByIdReturnModel> GetNewsById(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetNewsByIdReturnModel>("EXEC @procResult = [dbo].[GetNewsById] @Id", idParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetNewsByIdReturnModel>> GetNewsByIdAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetNewsByIdReturnModel>("EXEC [dbo].[GetNewsById] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetNewsWithNoDistrictValReturnModel> GetNewsWithNoDistrictVal(int? pageNumber, int? rowspPage, out int? countTitle)
        {
            int procResult;
            return GetNewsWithNoDistrictVal(pageNumber, rowspPage, out countTitle, out procResult);
        }

        public System.Collections.Generic.List<GetNewsWithNoDistrictValReturnModel> GetNewsWithNoDistrictVal(int? pageNumber, int? rowspPage, out int? countTitle, out int procResult)
        {
            var pageNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageNumber", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = System.DBNull.Value;

            var rowspPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RowspPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = rowspPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!rowspPage.HasValue)
                rowspPageParam.Value = System.DBNull.Value;

            var countTitleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountTitle", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetNewsWithNoDistrictValReturnModel>("EXEC @procResult = [dbo].[GetNewsWithNoDistrictVal] @PageNumber, @RowspPage, @CountTitle OUTPUT", pageNumberParam, rowspPageParam, countTitleParam, procResultParam).ToList();
            if (IsSqlParameterNull(countTitleParam))
                countTitle = null;
            else
                countTitle = (int) countTitleParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<GetPrivateNewsByIdReturnModel> GetPrivateNewsById(int? id)
        {
            int procResult;
            return GetPrivateNewsById(id, out procResult);
        }

        public System.Collections.Generic.List<GetPrivateNewsByIdReturnModel> GetPrivateNewsById(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetPrivateNewsByIdReturnModel>("EXEC @procResult = [dbo].[GetPrivateNewsById] @Id", idParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetPrivateNewsByIdReturnModel>> GetPrivateNewsByIdAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetPrivateNewsByIdReturnModel>("EXEC [dbo].[GetPrivateNewsById] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public int LoginUser(string phoneNumber)
        {
            var phoneNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PhoneNumber", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = phoneNumber, Size = 50 };
            if (phoneNumberParam.Value == null)
                phoneNumberParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[LoginUser] @PhoneNumber", phoneNumberParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<PrivateNewsNotAssginedAreaReturnModel> PrivateNewsNotAssginedArea(int? pageNumber, int? rowspPage, out int? countTitle)
        {
            int procResult;
            return PrivateNewsNotAssginedArea(pageNumber, rowspPage, out countTitle, out procResult);
        }

        public System.Collections.Generic.List<PrivateNewsNotAssginedAreaReturnModel> PrivateNewsNotAssginedArea(int? pageNumber, int? rowspPage, out int? countTitle, out int procResult)
        {
            var pageNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageNumber", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = System.DBNull.Value;

            var rowspPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RowspPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = rowspPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!rowspPage.HasValue)
                rowspPageParam.Value = System.DBNull.Value;

            var countTitleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountTitle", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<PrivateNewsNotAssginedAreaReturnModel>("EXEC @procResult = [dbo].[PrivateNewsNotAssginedArea] @PageNumber, @RowspPage, @CountTitle OUTPUT", pageNumberParam, rowspPageParam, countTitleParam, procResultParam).ToList();
            if (IsSqlParameterNull(countTitleParam))
                countTitle = null;
            else
                countTitle = (int) countTitleParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public int ProcGetSpamByPhoneNo(int? phoneNumber)
        {
            var phoneNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PhoneNumber", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = phoneNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!phoneNumber.HasValue)
                phoneNumberParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[procGetSpamByPhoneNo] @PhoneNumber", phoneNumberParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<SearchMyPostReturnModel> SearchMyPost(int? tinhThanhId, int? quanHuyenId, string titleSearch, string price, int? pageNumber, int? rowspPage, int? userId, out int? countTitle)
        {
            int procResult;
            return SearchMyPost(tinhThanhId, quanHuyenId, titleSearch, price, pageNumber, rowspPage, userId, out countTitle, out procResult);
        }

        public System.Collections.Generic.List<SearchMyPostReturnModel> SearchMyPost(int? tinhThanhId, int? quanHuyenId, string titleSearch, string price, int? pageNumber, int? rowspPage, int? userId, out int? countTitle, out int procResult)
        {
            var tinhThanhIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TinhThanhId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tinhThanhId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tinhThanhId.HasValue)
                tinhThanhIdParam.Value = System.DBNull.Value;

            var quanHuyenIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuanHuyenId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = quanHuyenId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!quanHuyenId.HasValue)
                quanHuyenIdParam.Value = System.DBNull.Value;

            var titleSearchParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TitleSearch", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = titleSearch, Size = 1000 };
            if (titleSearchParam.Value == null)
                titleSearchParam.Value = System.DBNull.Value;

            var priceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Price", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = price, Size = 50 };
            if (priceParam.Value == null)
                priceParam.Value = System.DBNull.Value;

            var pageNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageNumber", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = System.DBNull.Value;

            var rowspPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RowspPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = rowspPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!rowspPage.HasValue)
                rowspPageParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var countTitleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountTitle", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SearchMyPostReturnModel>("EXEC @procResult = [dbo].[Search_MyPost] @TinhThanhId, @QuanHuyenId, @TitleSearch, @Price, @PageNumber, @RowspPage, @UserId, @CountTitle OUTPUT", tinhThanhIdParam, quanHuyenIdParam, titleSearchParam, priceParam, pageNumberParam, rowspPageParam, userIdParam, countTitleParam, procResultParam).ToList();
            if (IsSqlParameterNull(countTitleParam))
                countTitle = null;
            else
                countTitle = (int) countTitleParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<SearchTblNewsReturnModel> SearchTblNews(int? tinhThanhId, int? quanHuyenId, string titleSearch, string price, int? pageNumber, int? rowspPage, int? menuId, out int? countTitle)
        {
            int procResult;
            return SearchTblNews(tinhThanhId, quanHuyenId, titleSearch, price, pageNumber, rowspPage, menuId, out countTitle, out procResult);
        }

        public System.Collections.Generic.List<SearchTblNewsReturnModel> SearchTblNews(int? tinhThanhId, int? quanHuyenId, string titleSearch, string price, int? pageNumber, int? rowspPage, int? menuId, out int? countTitle, out int procResult)
        {
            var tinhThanhIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TinhThanhId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tinhThanhId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tinhThanhId.HasValue)
                tinhThanhIdParam.Value = System.DBNull.Value;

            var quanHuyenIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuanHuyenId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = quanHuyenId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!quanHuyenId.HasValue)
                quanHuyenIdParam.Value = System.DBNull.Value;

            var titleSearchParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TitleSearch", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = titleSearch, Size = 1000 };
            if (titleSearchParam.Value == null)
                titleSearchParam.Value = System.DBNull.Value;

            var priceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Price", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = price, Size = 50 };
            if (priceParam.Value == null)
                priceParam.Value = System.DBNull.Value;

            var pageNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageNumber", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = System.DBNull.Value;

            var rowspPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RowspPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = rowspPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!rowspPage.HasValue)
                rowspPageParam.Value = System.DBNull.Value;

            var menuIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MenuId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = menuId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!menuId.HasValue)
                menuIdParam.Value = System.DBNull.Value;

            var countTitleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountTitle", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SearchTblNewsReturnModel>("EXEC @procResult = [dbo].[Search_tblNews] @TinhThanhId, @QuanHuyenId, @TitleSearch, @Price, @PageNumber, @RowspPage, @MenuId, @CountTitle OUTPUT", tinhThanhIdParam, quanHuyenIdParam, titleSearchParam, priceParam, pageNumberParam, rowspPageParam, menuIdParam, countTitleParam, procResultParam).ToList();
            if (IsSqlParameterNull(countTitleParam))
                countTitle = null;
            else
                countTitle = (int) countTitleParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<SearchTblPrivateNewsReturnModel> SearchTblPrivateNews(string titleSearch, string phoneNumber, string address, string price, System.DateTime? dateStart, System.DateTime? dateEnd, int? pageNumber, int? rowspPage, int? status, int? menuId, int? tinhThanhId, int? quanHuyenId, out int? countTitle)
        {
            int procResult;
            return SearchTblPrivateNews(titleSearch, phoneNumber, address, price, dateStart, dateEnd, pageNumber, rowspPage, status, menuId, tinhThanhId, quanHuyenId, out countTitle, out procResult);
        }

        public System.Collections.Generic.List<SearchTblPrivateNewsReturnModel> SearchTblPrivateNews(string titleSearch, string phoneNumber, string address, string price, System.DateTime? dateStart, System.DateTime? dateEnd, int? pageNumber, int? rowspPage, int? status, int? menuId, int? tinhThanhId, int? quanHuyenId, out int? countTitle, out int procResult)
        {
            var titleSearchParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TitleSearch", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = titleSearch, Size = 1000 };
            if (titleSearchParam.Value == null)
                titleSearchParam.Value = System.DBNull.Value;

            var phoneNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PhoneNumber", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = phoneNumber, Size = 20 };
            if (phoneNumberParam.Value == null)
                phoneNumberParam.Value = System.DBNull.Value;

            var addressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = address, Size = 1000 };
            if (addressParam.Value == null)
                addressParam.Value = System.DBNull.Value;

            var priceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Price", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = price, Size = 1000 };
            if (priceParam.Value == null)
                priceParam.Value = System.DBNull.Value;

            var dateStartParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DateStart", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = dateStart.GetValueOrDefault() };
            if (!dateStart.HasValue)
                dateStartParam.Value = System.DBNull.Value;

            var dateEndParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DateEnd", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = dateEnd.GetValueOrDefault() };
            if (!dateEnd.HasValue)
                dateEndParam.Value = System.DBNull.Value;

            var pageNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageNumber", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = System.DBNull.Value;

            var rowspPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RowspPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = rowspPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!rowspPage.HasValue)
                rowspPageParam.Value = System.DBNull.Value;

            var statusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Status", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = status.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!status.HasValue)
                statusParam.Value = System.DBNull.Value;

            var menuIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MenuId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = menuId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!menuId.HasValue)
                menuIdParam.Value = System.DBNull.Value;

            var tinhThanhIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TinhThanhId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tinhThanhId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tinhThanhId.HasValue)
                tinhThanhIdParam.Value = System.DBNull.Value;

            var quanHuyenIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuanHuyenId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = quanHuyenId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!quanHuyenId.HasValue)
                quanHuyenIdParam.Value = System.DBNull.Value;

            var countTitleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountTitle", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SearchTblPrivateNewsReturnModel>("EXEC @procResult = [dbo].[Search_tblPrivateNews] @TitleSearch, @PhoneNumber, @Address, @Price, @DateStart, @DateEnd, @PageNumber, @RowspPage, @Status, @MenuId, @TinhThanhId, @QuanHuyenId, @CountTitle OUTPUT", titleSearchParam, phoneNumberParam, addressParam, priceParam, dateStartParam, dateEndParam, pageNumberParam, rowspPageParam, statusParam, menuIdParam, tinhThanhIdParam, quanHuyenIdParam, countTitleParam, procResultParam).ToList();
            if (IsSqlParameterNull(countTitleParam))
                countTitle = null;
            else
                countTitle = (int) countTitleParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public int UpdateTblMenu(string name, string description, int? parentId, int? id)
        {
            var nameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Name", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = name, Size = 50 };
            if (nameParam.Value == null)
                nameParam.Value = System.DBNull.Value;

            var descriptionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Description", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = description, Size = 1000 };
            if (descriptionParam.Value == null)
                descriptionParam.Value = System.DBNull.Value;

            var parentIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ParentId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = parentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!parentId.HasValue)
                parentIdParam.Value = System.DBNull.Value;

            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[Update_tblMenu] @Name, @Description, @ParentId, @Id", nameParam, descriptionParam, parentIdParam, idParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UpdateTblNews(string title, int? tinhThanhId, int? quanHuyenId, string address, int? menuId, string dientich, string price, string phoneNumber, string newsContent, int? userId, int? id)
        {
            var titleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Title", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = title, Size = 1000 };
            if (titleParam.Value == null)
                titleParam.Value = System.DBNull.Value;

            var tinhThanhIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TinhThanhId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tinhThanhId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tinhThanhId.HasValue)
                tinhThanhIdParam.Value = System.DBNull.Value;

            var quanHuyenIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@QuanHuyenId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = quanHuyenId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!quanHuyenId.HasValue)
                quanHuyenIdParam.Value = System.DBNull.Value;

            var addressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = address, Size = 1000 };
            if (addressParam.Value == null)
                addressParam.Value = System.DBNull.Value;

            var menuIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MenuId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = menuId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!menuId.HasValue)
                menuIdParam.Value = System.DBNull.Value;

            var dientichParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Dientich", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = dientich, Size = 50 };
            if (dientichParam.Value == null)
                dientichParam.Value = System.DBNull.Value;

            var priceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Price", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = price, Size = 50 };
            if (priceParam.Value == null)
                priceParam.Value = System.DBNull.Value;

            var phoneNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PhoneNumber", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = phoneNumber, Size = 50 };
            if (phoneNumberParam.Value == null)
                phoneNumberParam.Value = System.DBNull.Value;

            var newsContentParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@NewsContent", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = newsContent, Size = -1 };
            if (newsContentParam.Value == null)
                newsContentParam.Value = System.DBNull.Value;

            var userIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = userId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!userId.HasValue)
                userIdParam.Value = System.DBNull.Value;

            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[Update_tblNews] @Title, @TinhThanhId, @QuanHuyenId, @Address, @MenuId, @Dientich, @Price, @PhoneNumber, @NewsContent, @UserId, @Id", titleParam, tinhThanhIdParam, quanHuyenIdParam, addressParam, menuIdParam, dientichParam, priceParam, phoneNumberParam, newsContentParam, userIdParam, idParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UpdateTblPrivateNewsViaGoogle(int? status, int? id)
        {
            var statusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Status", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = status.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!status.HasValue)
                statusParam.Value = System.DBNull.Value;

            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[Update_tblPrivateNewsViaGoogle] @Status, @Id", statusParam, idParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UpdateUserInfo(string fullName, string email, string address, string phoneNumer)
        {
            var fullNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FullName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = fullName, Size = 300 };
            if (fullNameParam.Value == null)
                fullNameParam.Value = System.DBNull.Value;

            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Email", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 50 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var addressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = address, Size = -1 };
            if (addressParam.Value == null)
                addressParam.Value = System.DBNull.Value;

            var phoneNumerParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PhoneNumer", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = phoneNumer, Size = 50 };
            if (phoneNumerParam.Value == null)
                phoneNumerParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[Update_UserInfo] @FullName, @Email, @Address, @PhoneNumer", fullNameParam, emailParam, addressParam, phoneNumerParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UserInfo(string phoneNumber)
        {
            var phoneNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PhoneNumber", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = phoneNumber, Size = 50 };
            if (phoneNumberParam.Value == null)
                phoneNumberParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[UserInfo] @PhoneNumber", phoneNumberParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeFrontendDbContext : IFrontendDbContext
    {
        public System.Data.Entity.DbSet<TblArea> TblAreas { get; set; }
        public System.Data.Entity.DbSet<TblMenu> TblMenus { get; set; }
        public System.Data.Entity.DbSet<TblNews> TblNews { get; set; }
        public System.Data.Entity.DbSet<TblPrivateNew> TblPrivateNews { get; set; }
        public System.Data.Entity.DbSet<TblSpamPhone> TblSpamPhones { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }
        public System.Data.Entity.DbSet<WebpagesMembership> WebpagesMemberships { get; set; }
        public System.Data.Entity.DbSet<WebpagesOAuthMembership> WebpagesOAuthMemberships { get; set; }
        public System.Data.Entity.DbSet<WebpagesRole> WebpagesRoles { get; set; }

        public FakeFrontendDbContext()
        {
            TblAreas = new FakeDbSet<TblArea>("TblAreaId");
            TblMenus = new FakeDbSet<TblMenu>("TblMenuId");
            TblNews = new FakeDbSet<TblNews>("TblNewsId");
            TblPrivateNews = new FakeDbSet<TblPrivateNew>("TblPrivateNewId");
            TblSpamPhones = new FakeDbSet<TblSpamPhone>("TblSpamPhoneId");
            Users = new FakeDbSet<User>("UserId");
            WebpagesMemberships = new FakeDbSet<WebpagesMembership>("UserId");
            WebpagesOAuthMemberships = new FakeDbSet<WebpagesOAuthMembership>("Provider", "ProviderUserId");
            WebpagesRoles = new FakeDbSet<WebpagesRole>("RoleId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        // Stored Procedures
        public System.Collections.Generic.List<AddTblMenuReturnModel> AddTblMenu(string name, string description, int? parentId)
        {
            int procResult;
            return AddTblMenu(name, description, parentId, out procResult);
        }

        public System.Collections.Generic.List<AddTblMenuReturnModel> AddTblMenu(string name, string description, int? parentId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<AddTblMenuReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AddTblMenuReturnModel>> AddTblMenuAsync(string name, string description, int? parentId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AddTblMenu(name, description, parentId, out procResult));
        }

        public System.Collections.Generic.List<AddTblNewsReturnModel> AddTblNews(string title, int? tinhThanhId, int? quanHuyenId, string address, int? menuId, string dientich, string price, string phoneNumber, string newsContent, int? userId)
        {
            int procResult;
            return AddTblNews(title, tinhThanhId, quanHuyenId, address, menuId, dientich, price, phoneNumber, newsContent, userId, out procResult);
        }

        public System.Collections.Generic.List<AddTblNewsReturnModel> AddTblNews(string title, int? tinhThanhId, int? quanHuyenId, string address, int? menuId, string dientich, string price, string phoneNumber, string newsContent, int? userId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<AddTblNewsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AddTblNewsReturnModel>> AddTblNewsAsync(string title, int? tinhThanhId, int? quanHuyenId, string address, int? menuId, string dientich, string price, string phoneNumber, string newsContent, int? userId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AddTblNews(title, tinhThanhId, quanHuyenId, address, menuId, dientich, price, phoneNumber, newsContent, userId, out procResult));
        }

        public System.Collections.Generic.List<AddTblPrivateNewsReturnModel> AddTblPrivateNews(string title, string newsContent, string address, string dientich, string price, string phoneNumber, int? menuId, int? tinhThanhId, int? quanHuyenId, int? status)
        {
            int procResult;
            return AddTblPrivateNews(title, newsContent, address, dientich, price, phoneNumber, menuId, tinhThanhId, quanHuyenId, status, out procResult);
        }

        public System.Collections.Generic.List<AddTblPrivateNewsReturnModel> AddTblPrivateNews(string title, string newsContent, string address, string dientich, string price, string phoneNumber, int? menuId, int? tinhThanhId, int? quanHuyenId, int? status, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<AddTblPrivateNewsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AddTblPrivateNewsReturnModel>> AddTblPrivateNewsAsync(string title, string newsContent, string address, string dientich, string price, string phoneNumber, int? menuId, int? tinhThanhId, int? quanHuyenId, int? status)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AddTblPrivateNews(title, newsContent, address, dientich, price, phoneNumber, menuId, tinhThanhId, quanHuyenId, status, out procResult));
        }

        public System.Collections.Generic.List<AddTblSpamPhoneReturnModel> AddTblSpamPhone(string spamPhone, string spamName, int? status)
        {
            int procResult;
            return AddTblSpamPhone(spamPhone, spamName, status, out procResult);
        }

        public System.Collections.Generic.List<AddTblSpamPhoneReturnModel> AddTblSpamPhone(string spamPhone, string spamName, int? status, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<AddTblSpamPhoneReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<AddTblSpamPhoneReturnModel>> AddTblSpamPhoneAsync(string spamPhone, string spamName, int? status)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(AddTblSpamPhone(spamPhone, spamName, status, out procResult));
        }

        public int AddTblUserRegister(string password, string fullName, string phoneNumber, string email, string address)
        {
 
            return 0;
        }

        public int ChangePassword(string password, string phoneNumber)
        {
 
            return 0;
        }

        public int CheckPhoneNumber(string phoneNumber)
        {
 
            return 0;
        }

        public System.Collections.Generic.List<CheckPhoneSpamReturnModel> CheckPhoneSpam(string phoneNumber)
        {
            int procResult;
            return CheckPhoneSpam(phoneNumber, out procResult);
        }

        public System.Collections.Generic.List<CheckPhoneSpamReturnModel> CheckPhoneSpam(string phoneNumber, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<CheckPhoneSpamReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<CheckPhoneSpamReturnModel>> CheckPhoneSpamAsync(string phoneNumber)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(CheckPhoneSpam(phoneNumber, out procResult));
        }

        public int DeactivePrivateNewsByPhone(string phoneNumber)
        {
 
            return 0;
        }

        public int DeleteMenuById(int? id)
        {
 
            return 0;
        }

        public int DeleteNewsById(int? id)
        {
 
            return 0;
        }

        public System.Collections.Generic.List<GetCategoryNewsReturnModel> GetCategoryNews()
        {
            int procResult;
            return GetCategoryNews(out procResult);
        }

        public System.Collections.Generic.List<GetCategoryNewsReturnModel> GetCategoryNews(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetCategoryNewsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetCategoryNewsReturnModel>> GetCategoryNewsAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetCategoryNews(out procResult));
        }

        public System.Collections.Generic.List<GetParentMenuReturnModel> GetParentMenu()
        {
            int procResult;
            return GetParentMenu(out procResult);
        }

        public System.Collections.Generic.List<GetParentMenuReturnModel> GetParentMenu(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetParentMenuReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetParentMenuReturnModel>> GetParentMenuAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetParentMenu(out procResult));
        }

        public System.Collections.Generic.List<GetParentMenuByIdReturnModel> GetParentMenuById(int? id)
        {
            int procResult;
            return GetParentMenuById(id, out procResult);
        }

        public System.Collections.Generic.List<GetParentMenuByIdReturnModel> GetParentMenuById(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetParentMenuByIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetParentMenuByIdReturnModel>> GetParentMenuByIdAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetParentMenuById(id, out procResult));
        }

        public System.Collections.Generic.List<GetTblMenuReturnModel> GetTblMenu()
        {
            int procResult;
            return GetTblMenu(out procResult);
        }

        public System.Collections.Generic.List<GetTblMenuReturnModel> GetTblMenu(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetTblMenuReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetTblMenuReturnModel>> GetTblMenuAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetTblMenu(out procResult));
        }

        public System.Collections.Generic.List<GetAreaReturnModel> GetArea()
        {
            int procResult;
            return GetArea(out procResult);
        }

        public System.Collections.Generic.List<GetAreaReturnModel> GetArea(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAreaReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAreaReturnModel>> GetAreaAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetArea(out procResult));
        }

        public System.Collections.Generic.List<GetAreaByParentIdReturnModel> GetAreaByParentId(int? parentId)
        {
            int procResult;
            return GetAreaByParentId(parentId, out procResult);
        }

        public System.Collections.Generic.List<GetAreaByParentIdReturnModel> GetAreaByParentId(int? parentId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAreaByParentIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAreaByParentIdReturnModel>> GetAreaByParentIdAsync(int? parentId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetAreaByParentId(parentId, out procResult));
        }

        public System.Collections.Generic.List<GetDetailNewsReturnModel> GetDetailNews(int? id)
        {
            int procResult;
            return GetDetailNews(id, out procResult);
        }

        public System.Collections.Generic.List<GetDetailNewsReturnModel> GetDetailNews(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetDetailNewsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetDetailNewsReturnModel>> GetDetailNewsAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetDetailNews(id, out procResult));
        }

        public int GetDistrictIdByName(string name, out int? id)
        {
            id = default(int);
 
            return 0;
        }

        public System.Collections.Generic.List<GetMenuByIdReturnModel> GetMenuById(int? id)
        {
            int procResult;
            return GetMenuById(id, out procResult);
        }

        public System.Collections.Generic.List<GetMenuByIdReturnModel> GetMenuById(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetMenuByIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetMenuByIdReturnModel>> GetMenuByIdAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetMenuById(id, out procResult));
        }

        public System.Collections.Generic.List<GetNewsByIdReturnModel> GetNewsById(int? id)
        {
            int procResult;
            return GetNewsById(id, out procResult);
        }

        public System.Collections.Generic.List<GetNewsByIdReturnModel> GetNewsById(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetNewsByIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetNewsByIdReturnModel>> GetNewsByIdAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetNewsById(id, out procResult));
        }

        public System.Collections.Generic.List<GetNewsWithNoDistrictValReturnModel> GetNewsWithNoDistrictVal(int? pageNumber, int? rowspPage, out int? countTitle)
        {
            int procResult;
            return GetNewsWithNoDistrictVal(pageNumber, rowspPage, out countTitle, out procResult);
        }

        public System.Collections.Generic.List<GetNewsWithNoDistrictValReturnModel> GetNewsWithNoDistrictVal(int? pageNumber, int? rowspPage, out int? countTitle, out int procResult)
        {
            countTitle = default(int);

            procResult = 0;
            return new System.Collections.Generic.List<GetNewsWithNoDistrictValReturnModel>();
        }

        public System.Collections.Generic.List<GetPrivateNewsByIdReturnModel> GetPrivateNewsById(int? id)
        {
            int procResult;
            return GetPrivateNewsById(id, out procResult);
        }

        public System.Collections.Generic.List<GetPrivateNewsByIdReturnModel> GetPrivateNewsById(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetPrivateNewsByIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetPrivateNewsByIdReturnModel>> GetPrivateNewsByIdAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetPrivateNewsById(id, out procResult));
        }

        public int LoginUser(string phoneNumber)
        {
 
            return 0;
        }

        public System.Collections.Generic.List<PrivateNewsNotAssginedAreaReturnModel> PrivateNewsNotAssginedArea(int? pageNumber, int? rowspPage, out int? countTitle)
        {
            int procResult;
            return PrivateNewsNotAssginedArea(pageNumber, rowspPage, out countTitle, out procResult);
        }

        public System.Collections.Generic.List<PrivateNewsNotAssginedAreaReturnModel> PrivateNewsNotAssginedArea(int? pageNumber, int? rowspPage, out int? countTitle, out int procResult)
        {
            countTitle = default(int);

            procResult = 0;
            return new System.Collections.Generic.List<PrivateNewsNotAssginedAreaReturnModel>();
        }

        public int ProcGetSpamByPhoneNo(int? phoneNumber)
        {
 
            return 0;
        }

        public System.Collections.Generic.List<SearchMyPostReturnModel> SearchMyPost(int? tinhThanhId, int? quanHuyenId, string titleSearch, string price, int? pageNumber, int? rowspPage, int? userId, out int? countTitle)
        {
            int procResult;
            return SearchMyPost(tinhThanhId, quanHuyenId, titleSearch, price, pageNumber, rowspPage, userId, out countTitle, out procResult);
        }

        public System.Collections.Generic.List<SearchMyPostReturnModel> SearchMyPost(int? tinhThanhId, int? quanHuyenId, string titleSearch, string price, int? pageNumber, int? rowspPage, int? userId, out int? countTitle, out int procResult)
        {
            countTitle = default(int);

            procResult = 0;
            return new System.Collections.Generic.List<SearchMyPostReturnModel>();
        }

        public System.Collections.Generic.List<SearchTblNewsReturnModel> SearchTblNews(int? tinhThanhId, int? quanHuyenId, string titleSearch, string price, int? pageNumber, int? rowspPage, int? menuId, out int? countTitle)
        {
            int procResult;
            return SearchTblNews(tinhThanhId, quanHuyenId, titleSearch, price, pageNumber, rowspPage, menuId, out countTitle, out procResult);
        }

        public System.Collections.Generic.List<SearchTblNewsReturnModel> SearchTblNews(int? tinhThanhId, int? quanHuyenId, string titleSearch, string price, int? pageNumber, int? rowspPage, int? menuId, out int? countTitle, out int procResult)
        {
            countTitle = default(int);

            procResult = 0;
            return new System.Collections.Generic.List<SearchTblNewsReturnModel>();
        }

        public System.Collections.Generic.List<SearchTblPrivateNewsReturnModel> SearchTblPrivateNews(string titleSearch, string phoneNumber, string address, string price, System.DateTime? dateStart, System.DateTime? dateEnd, int? pageNumber, int? rowspPage, int? status, int? menuId, int? tinhThanhId, int? quanHuyenId, out int? countTitle)
        {
            int procResult;
            return SearchTblPrivateNews(titleSearch, phoneNumber, address, price, dateStart, dateEnd, pageNumber, rowspPage, status, menuId, tinhThanhId, quanHuyenId, out countTitle, out procResult);
        }

        public System.Collections.Generic.List<SearchTblPrivateNewsReturnModel> SearchTblPrivateNews(string titleSearch, string phoneNumber, string address, string price, System.DateTime? dateStart, System.DateTime? dateEnd, int? pageNumber, int? rowspPage, int? status, int? menuId, int? tinhThanhId, int? quanHuyenId, out int? countTitle, out int procResult)
        {
            countTitle = default(int);

            procResult = 0;
            return new System.Collections.Generic.List<SearchTblPrivateNewsReturnModel>();
        }

        public int UpdateTblMenu(string name, string description, int? parentId, int? id)
        {
 
            return 0;
        }

        public int UpdateTblNews(string title, int? tinhThanhId, int? quanHuyenId, string address, int? menuId, string dientich, string price, string phoneNumber, string newsContent, int? userId, int? id)
        {
 
            return 0;
        }

        public int UpdateTblPrivateNewsViaGoogle(int? status, int? id)
        {
 
            return 0;
        }

        public int UpdateUserInfo(string fullName, string email, string address, string phoneNumer)
        {
 
            return 0;
        }

        public int UserInfo(string phoneNumber)
        {
 
            return 0;
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // tbl_Area
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TblArea
    {
        public int TblAreaId { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string Type { get; set; } // Type (length: 50)
        public int? ParentId { get; set; } // ParentId

        public TblArea()
        {
            ParentId = 0;
        }
    }

    // tbl_Menu
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TblMenu
    {
        public int TblMenuId { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string Description { get; set; } // Description (length: 1000)
        public int ParentId { get; set; } // ParentId
        public string ActionsUrl { get; set; } // Actions_Url (length: 250)
        public string Category { get; set; } // Category (length: 250)
        public bool Active { get; set; } // Active
        public short? Sequences { get; set; } // Sequences

        public TblMenu()
        {
            Name = "Description";
            ParentId = 0;
            ActionsUrl = "";
            Category = "";
            Active = true;
        }
    }

    // tbl_News
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TblNews
    {
        public int TblNewsId { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 1000)
        public int TinhThanhId { get; set; } // TinhThanhId
        public int QuanHuyenId { get; set; } // QuanHuyenId
        public string Address { get; set; } // Address (length: 1000)
        public int MenuId { get; set; } // MenuId
        public string Dientich { get; set; } // Dientich (length: 50)
        public string Price { get; set; } // Price (length: 50)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 50)
        public string NewsContent { get; set; } // NewsContent
        public int UserId { get; set; } // UserId
        public System.DateTime? Datetime { get; set; } // Datetime
    }

    // tbl_PrivateNews
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TblPrivateNew
    {
        public int TblPrivateNewId { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 1000)
        public string NewsContent { get; set; } // NewsContent
        public string Address { get; set; } // Address (length: 1000)
        public string Dientich { get; set; } // Dientich (length: 50)
        public string Price { get; set; } // Price (length: 50)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 50)
        public int? MenuId { get; set; } // MenuId
        public int? TinhThanhId { get; set; } // TinhThanhId
        public int? QuanHuyenId { get; set; } // QuanHuyenId
        public int? UserId { get; set; } // UserId
        public decimal? OrgPrice { get; set; } // Org_Price
        public int? Status { get; set; } // Status
        public System.DateTime? CreateDate { get; set; } // CreateDate
        public short Active { get; set; } // Active
        public bool Reup { get; set; } // Reup

        public TblPrivateNew()
        {
            MenuId = 0;
            TinhThanhId = 0;
            Active = 1;
            Reup = false;
        }
    }

    // tbl_SpamPhone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TblSpamPhone
    {
        public int TblSpamPhoneId { get; set; } // id (Primary key)
        public string SpamPhone { get; set; } // spam_phone (length: 20)
        public string SpamName { get; set; } // spam_name (length: 250)
        public int? Status { get; set; } // status
    }

    // Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class User
    {
        public int UserId { get; set; } // Id (Primary key)
        public string UserName { get; set; } // UserName (length: 56)
        public string FullName { get; set; } // FullName (length: 250)
        public string Email { get; set; } // Email (length: 150)
        public string Address { get; set; } // Address

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<WebpagesRole> WebpagesRoles { get; set; } // Many to many mapping

        public User()
        {
            WebpagesRoles = new System.Collections.Generic.List<WebpagesRole>();
        }
    }

    // webpages_Membership
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class WebpagesMembership
    {
        public int UserId { get; set; } // UserId (Primary key)
        public System.DateTime? CreateDate { get; set; } // CreateDate
        public string ConfirmationToken { get; set; } // ConfirmationToken (length: 128)
        public bool? IsConfirmed { get; set; } // IsConfirmed
        public System.DateTime? LastPasswordFailureDate { get; set; } // LastPasswordFailureDate
        public int PasswordFailuresSinceLastSuccess { get; set; } // PasswordFailuresSinceLastSuccess
        public string Password { get; set; } // Password (length: 128)
        public System.DateTime? PasswordChangedDate { get; set; } // PasswordChangedDate
        public string PasswordSalt { get; set; } // PasswordSalt (length: 128)
        public string PasswordVerificationToken { get; set; } // PasswordVerificationToken (length: 128)
        public System.DateTime? PasswordVerificationTokenExpirationDate { get; set; } // PasswordVerificationTokenExpirationDate

        public WebpagesMembership()
        {
            IsConfirmed = false;
            PasswordFailuresSinceLastSuccess = 0;
        }
    }

    // webpages_OAuthMembership
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class WebpagesOAuthMembership
    {
        public string Provider { get; set; } // Provider (Primary key) (length: 30)
        public string ProviderUserId { get; set; } // ProviderUserId (Primary key) (length: 100)
        public int UserId { get; set; } // UserId
    }

    // webpages_Roles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class WebpagesRole
    {
        public int RoleId { get; set; } // RoleId (Primary key)
        public string RoleName { get; set; } // RoleName (length: 256)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<User> Users { get; set; } // Many to many mapping

        public WebpagesRole()
        {
            Users = new System.Collections.Generic.List<User>();
        }
    }

    #endregion

    #region POCO Configuration

    // tbl_Area
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TblAreaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblArea>
    {
        public TblAreaConfiguration()
            : this("dbo")
        {
        }

        public TblAreaConfiguration(string schema)
        {
            ToTable("tbl_Area", schema);
            HasKey(x => x.TblAreaId);

            Property(x => x.TblAreaId).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Type).HasColumnName(@"Type").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ParentId).HasColumnName(@"ParentId").IsOptional().HasColumnType("int");
        }
    }

    // tbl_Menu
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TblMenuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblMenu>
    {
        public TblMenuConfiguration()
            : this("dbo")
        {
        }

        public TblMenuConfiguration(string schema)
        {
            ToTable("tbl_Menu", schema);
            HasKey(x => x.TblMenuId);

            Property(x => x.TblMenuId).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").IsOptional().HasColumnType("nvarchar").HasMaxLength(1000);
            Property(x => x.ParentId).HasColumnName(@"ParentId").IsRequired().HasColumnType("int");
            Property(x => x.ActionsUrl).HasColumnName(@"Actions_Url").IsOptional().HasColumnType("nvarchar").HasMaxLength(250);
            Property(x => x.Category).HasColumnName(@"Category").IsOptional().HasColumnType("nvarchar").HasMaxLength(250);
            Property(x => x.Active).HasColumnName(@"Active").IsRequired().HasColumnType("bit");
            Property(x => x.Sequences).HasColumnName(@"Sequences").IsOptional().HasColumnType("smallint");
        }
    }

    // tbl_News
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TblNewsConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblNews>
    {
        public TblNewsConfiguration()
            : this("dbo")
        {
        }

        public TblNewsConfiguration(string schema)
        {
            ToTable("tbl_News", schema);
            HasKey(x => x.TblNewsId);

            Property(x => x.TblNewsId).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(1000);
            Property(x => x.TinhThanhId).HasColumnName(@"TinhThanhId").IsRequired().HasColumnType("int");
            Property(x => x.QuanHuyenId).HasColumnName(@"QuanHuyenId").IsRequired().HasColumnType("int");
            Property(x => x.Address).HasColumnName(@"Address").IsOptional().HasColumnType("nvarchar").HasMaxLength(1000);
            Property(x => x.MenuId).HasColumnName(@"MenuId").IsRequired().HasColumnType("int");
            Property(x => x.Dientich).HasColumnName(@"Dientich").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Price).HasColumnName(@"Price").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.NewsContent).HasColumnName(@"NewsContent").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().HasColumnType("int");
            Property(x => x.Datetime).HasColumnName(@"Datetime").IsOptional().HasColumnType("datetime");
        }
    }

    // tbl_PrivateNews
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TblPrivateNewConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblPrivateNew>
    {
        public TblPrivateNewConfiguration()
            : this("dbo")
        {
        }

        public TblPrivateNewConfiguration(string schema)
        {
            ToTable("tbl_PrivateNews", schema);
            HasKey(x => x.TblPrivateNewId);

            Property(x => x.TblPrivateNewId).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(1000);
            Property(x => x.NewsContent).HasColumnName(@"NewsContent").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.Address).HasColumnName(@"Address").IsOptional().HasColumnType("nvarchar").HasMaxLength(1000);
            Property(x => x.Dientich).HasColumnName(@"Dientich").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Price).HasColumnName(@"Price").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MenuId).HasColumnName(@"MenuId").IsOptional().HasColumnType("int");
            Property(x => x.TinhThanhId).HasColumnName(@"TinhThanhId").IsOptional().HasColumnType("int");
            Property(x => x.QuanHuyenId).HasColumnName(@"QuanHuyenId").IsOptional().HasColumnType("int");
            Property(x => x.UserId).HasColumnName(@"UserId").IsOptional().HasColumnType("int");
            Property(x => x.OrgPrice).HasColumnName(@"Org_Price").IsOptional().HasColumnType("decimal").HasPrecision(10,3);
            Property(x => x.Status).HasColumnName(@"Status").IsOptional().HasColumnType("int");
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Active).HasColumnName(@"Active").IsRequired().HasColumnType("smallint");
            Property(x => x.Reup).HasColumnName(@"Reup").IsRequired().HasColumnType("bit");
        }
    }

    // tbl_SpamPhone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TblSpamPhoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblSpamPhone>
    {
        public TblSpamPhoneConfiguration()
            : this("dbo")
        {
        }

        public TblSpamPhoneConfiguration(string schema)
        {
            ToTable("tbl_SpamPhone", schema);
            HasKey(x => x.TblSpamPhoneId);

            Property(x => x.TblSpamPhoneId).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SpamPhone).HasColumnName(@"spam_phone").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.SpamName).HasColumnName(@"spam_name").IsOptional().HasColumnType("nvarchar").HasMaxLength(250);
            Property(x => x.Status).HasColumnName(@"status").IsOptional().HasColumnType("int");
        }
    }

    // Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class UserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("Users", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserName).HasColumnName(@"UserName").IsRequired().HasColumnType("nvarchar").HasMaxLength(56);
            Property(x => x.FullName).HasColumnName(@"FullName").IsOptional().HasColumnType("nvarchar").HasMaxLength(250);
            Property(x => x.Email).HasColumnName(@"Email").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(150);
            Property(x => x.Address).HasColumnName(@"Address").IsOptional().HasColumnType("nvarchar(max)");
        }
    }

    // webpages_Membership
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class WebpagesMembershipConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WebpagesMembership>
    {
        public WebpagesMembershipConfiguration()
            : this("dbo")
        {
        }

        public WebpagesMembershipConfiguration(string schema)
        {
            ToTable("webpages_Membership", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").IsOptional().HasColumnType("datetime");
            Property(x => x.ConfirmationToken).HasColumnName(@"ConfirmationToken").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.IsConfirmed).HasColumnName(@"IsConfirmed").IsOptional().HasColumnType("bit");
            Property(x => x.LastPasswordFailureDate).HasColumnName(@"LastPasswordFailureDate").IsOptional().HasColumnType("datetime");
            Property(x => x.PasswordFailuresSinceLastSuccess).HasColumnName(@"PasswordFailuresSinceLastSuccess").IsRequired().HasColumnType("int");
            Property(x => x.Password).HasColumnName(@"Password").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.PasswordChangedDate).HasColumnName(@"PasswordChangedDate").IsOptional().HasColumnType("datetime");
            Property(x => x.PasswordSalt).HasColumnName(@"PasswordSalt").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.PasswordVerificationToken).HasColumnName(@"PasswordVerificationToken").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.PasswordVerificationTokenExpirationDate).HasColumnName(@"PasswordVerificationTokenExpirationDate").IsOptional().HasColumnType("datetime");
        }
    }

    // webpages_OAuthMembership
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class WebpagesOAuthMembershipConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WebpagesOAuthMembership>
    {
        public WebpagesOAuthMembershipConfiguration()
            : this("dbo")
        {
        }

        public WebpagesOAuthMembershipConfiguration(string schema)
        {
            ToTable("webpages_OAuthMembership", schema);
            HasKey(x => new { x.Provider, x.ProviderUserId });

            Property(x => x.Provider).HasColumnName(@"Provider").IsRequired().HasColumnType("nvarchar").HasMaxLength(30).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProviderUserId).HasColumnName(@"ProviderUserId").IsRequired().HasColumnType("nvarchar").HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().HasColumnType("int");
        }
    }

    // webpages_Roles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class WebpagesRoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WebpagesRole>
    {
        public WebpagesRoleConfiguration()
            : this("dbo")
        {
        }

        public WebpagesRoleConfiguration(string schema)
        {
            ToTable("webpages_Roles", schema);
            HasKey(x => x.RoleId);

            Property(x => x.RoleId).HasColumnName(@"RoleId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RoleName).HasColumnName(@"RoleName").IsRequired().HasColumnType("nvarchar").HasMaxLength(256);
            HasMany(t => t.Users).WithMany(t => t.WebpagesRoles).Map(m =>
            {
                m.ToTable("webpages_UsersInRoles", "dbo");
                m.MapLeftKey("RoleId");
                m.MapRightKey("UserId");
            });
        }
    }

    #endregion

    #region Stored procedure return models

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AddTblMenuReturnModel
    {
        public System.Decimal? Identity { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AddTblNewsReturnModel
    {
        public System.Decimal? Identity { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AddTblPrivateNewsReturnModel
    {
        public System.Decimal? Identity { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AddTblSpamPhoneReturnModel
    {
        public System.Decimal? Identity { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CheckPhoneSpamReturnModel
    {
        public System.Int32? CheckResult { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GetCategoryNewsReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Name { get; set; }
        public System.Int32 ParentId { get; set; }
        public System.String Actions_Url { get; set; }
        public System.String Category { get; set; }
        public System.Int16? Sequences { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GetParentMenuReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Name { get; set; }
        public System.Int32 ParentId { get; set; }
        public System.String Actions_Url { get; set; }
        public System.String Category { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GetParentMenuByIdReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Name { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GetTblMenuReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Name { get; set; }
        public System.Int32 ParentId { get; set; }
        public System.String Actions_Url { get; set; }
        public System.String Category { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GetAreaReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Name { get; set; }
        public System.Int32? ParentId { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GetAreaByParentIdReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Name { get; set; }
        public System.Int32? ParentId { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GetDetailNewsReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Title { get; set; }
        public System.Int32 TinhThanhId { get; set; }
        public System.Int32 QuanHuyenId { get; set; }
        public System.String Address { get; set; }
        public System.Int32 MenuId { get; set; }
        public System.String Dientich { get; set; }
        public System.String Price { get; set; }
        public System.String PhoneNumber { get; set; }
        public System.String NewsContent { get; set; }
        public System.Int32 UserId { get; set; }
        public System.String Name { get; set; }
        public System.DateTime? Datetime { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GetMenuByIdReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Name { get; set; }
        public System.String Description { get; set; }
        public System.Int32 ParentId { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GetNewsByIdReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Title { get; set; }
        public System.Int32 TinhThanhId { get; set; }
        public System.Int32 QuanHuyenId { get; set; }
        public System.String Address { get; set; }
        public System.Int32 MenuId { get; set; }
        public System.String Dientich { get; set; }
        public System.String Price { get; set; }
        public System.String PhoneNumber { get; set; }
        public System.String NewsContent { get; set; }
        public System.Int32 UserId { get; set; }
        public System.DateTime? Datetime { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GetNewsWithNoDistrictValReturnModel
    {
        public System.Int64? NUMBER { get; set; }
        public System.Int32 Id { get; set; }
        public System.String Title { get; set; }
        public System.String Price { get; set; }
        public System.String PhoneNumber { get; set; }
        public System.Int32? Status { get; set; }
        public System.DateTime? CreateDate { get; set; }
        public System.String NewsContent { get; set; }
        public System.Int32? TinhThanhId { get; set; }
        public System.Int32? QuanHuyenId { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GetPrivateNewsByIdReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Title { get; set; }
        public System.String NewsContent { get; set; }
        public System.String Address { get; set; }
        public System.String Dientich { get; set; }
        public System.String Price { get; set; }
        public System.String PhoneNumber { get; set; }
        public System.DateTime? CreateDate { get; set; }
        public System.Int32? Status { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PrivateNewsNotAssginedAreaReturnModel
    {
        public System.Int64? NUMBER { get; set; }
        public System.Int32 Id { get; set; }
        public System.String Title { get; set; }
        public System.String Price { get; set; }
        public System.String PhoneNumber { get; set; }
        public System.Int32? Status { get; set; }
        public System.DateTime? CreateDate { get; set; }
        public System.String NewsContent { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class SearchMyPostReturnModel
    {
        public System.Int64? NUMBER { get; set; }
        public System.Int32 Id { get; set; }
        public System.String Title { get; set; }
        public System.String NewsContent { get; set; }
        public System.String Price { get; set; }
        public System.String Name { get; set; }
        public System.DateTime? Datetime { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class SearchTblNewsReturnModel
    {
        public System.Int64? NUMBER { get; set; }
        public System.Int32 Id { get; set; }
        public System.String Title { get; set; }
        public System.String NewsContent { get; set; }
        public System.String Price { get; set; }
        public System.String Name { get; set; }
        public System.DateTime? Datetime { get; set; }
        public System.Int32 MenuId { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class SearchTblPrivateNewsReturnModel
    {
        public System.Int64? NUMBER { get; set; }
        public System.Int32 Id { get; set; }
        public System.String Title { get; set; }
        public System.String Price { get; set; }
        public System.String PhoneNumber { get; set; }
        public System.Int32? Status { get; set; }
        public System.DateTime? CreateDate { get; set; }
        public System.String NewsContent { get; set; }
        public System.Boolean ReUp { get; set; }
    }

    #endregion

}
// </auto-generated>

